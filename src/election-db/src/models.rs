// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]


use chrono::NaiveDateTime;
use bigdecimal::BigDecimal;
#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct Challenge {
    pub row_id: i32,
    pub id: i32,
    pub election: i32,
    pub type_: String,
    pub title: String,
    pub description: String,
    pub rewards_currency: Option<String>,
    pub rewards_total: Option<i64>,
    pub proposers_rewards: Option<i64>,
    pub vote_options: Option<i64>,
    pub extra: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
pub struct ChallengeType {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct CommunityAdvisorsReview {
    pub row_id: i32,
    pub proposal_id: i32,
    pub assessor: String,
    pub impact_alignment_rating_given: Option<i32>,
    pub impact_alignment_note: Option<String>,
    pub feasibility_rating_given: Option<i32>,
    pub feasibility_note: Option<String>,
    pub auditability_rating_given: Option<i32>,
    pub auditability_note: Option<String>,
    pub ranking: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct Config {
    pub row_id: i32,
    pub id: String,
    pub id2: String,
    pub id3: String,
    pub value: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
pub struct Currency {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct Election {
    pub row_id: i32,
    pub name: String,
    pub description: String,
    pub registration_snapshot_time: Option<NaiveDateTime>,
    pub voting_power_threshold: Option<i64>,
    pub max_voting_power_pct: Option<BigDecimal>,
    pub start_time: Option<NaiveDateTime>,
    pub end_time: Option<NaiveDateTime>,
    pub insight_sharing_start: Option<NaiveDateTime>,
    pub proposal_submission_start: Option<NaiveDateTime>,
    pub refine_proposals_start: Option<NaiveDateTime>,
    pub finalize_proposals_start: Option<NaiveDateTime>,
    pub proposal_assessment_start: Option<NaiveDateTime>,
    pub assessment_qa_start: Option<NaiveDateTime>,
    pub snapshot_start: Option<NaiveDateTime>,
    pub voting_start: Option<NaiveDateTime>,
    pub voting_end: Option<NaiveDateTime>,
    pub tallying_end: Option<NaiveDateTime>,
    pub extra: Option<serde_json::Value>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct Goal {
    pub id: i32,
    pub election_id: i32,
    pub idx: i32,
    pub name: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct Proposal {
    pub row_id: i32,
    pub id: i32,
    pub challenge: i64,
    pub title: String,
    pub summary: String,
    pub public_key: String,
    pub funds: i64,
    pub url: String,
    pub files_url: String,
    pub impact_score: i64,
    pub extra: Option<serde_json::Value>,
    pub proposer_name: String,
    pub proposer_contact: String,
    pub proposer_url: String,
    pub proposer_relevant_experience: String,
    pub bb_proposal_id: Option<Vec<u8>>,
    pub bb_vote_options: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct ProposalVoteplan {
    pub row_id: i32,
    pub proposal_id: Option<i32>,
    pub voteplan_id: Option<i32>,
    pub bb_proposal_index: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct StakeAddressBalance {
    pub row_id: i64,
    pub time: Option<NaiveDateTime>,
    pub block: Option<i64>,
    pub public_key: Option<String>,
    pub balance: Option<BigDecimal>,
    pub unpaid_rewards: Option<BigDecimal>,
}

#[derive(Queryable, Debug, Identifiable)]
pub struct VoteOption {
    pub id: i32,
    pub idea_scale: Option<String>,
    pub challenge: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct Voteplan {
    pub row_id: i32,
    pub election_id: i32,
    pub id: String,
    pub type_: String,
    pub encryption_key: Option<String>,
    pub group_id: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
pub struct VoteplanType {
    pub name: String,
    pub public_key: Option<bool>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct VoterRegistration {
    pub row_id: i64,
    pub time: Option<NaiveDateTime>,
    pub nonce: Option<i64>,
    pub purpose: Option<i64>,
    pub stake_pub: Option<String>,
    pub type_: Option<String>,
    pub delegations: Option<serde_json::Value>,
    pub reward_addr: Option<String>,
    pub txn: Option<Vec<u8>>,
    pub block: Option<i64>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(name))]
pub struct VoterRegistrationType {
    pub name: String,
    pub description: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct VotingGroup {
    pub row_id: i32,
    pub group_id: String,
    pub election_id: i32,
    pub token_id: Option<String>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(row_id))]
pub struct VotingPower {
    pub row_id: i64,
    pub election: Option<i32>,
    pub voting_key: Option<String>,
    pub power: Option<BigDecimal>,
}

