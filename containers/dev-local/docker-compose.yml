# ##############################################################################
# This file was generated by the following command:
#   earthly +local
#
# Changes made to this file will be lost if that command is run again.
#
# If changes need to be made, it is suggested to copy this file to
# another directory, so that it will not be over-written.
#
# This file is generated from the source contained at:
#   <repo>/containers/dev-local+build/docker-compose.yml
#
# Please edit that file, if you wish your changes to be included in the
# generated file, or submitted as a PR to the upstream repository.
# ##############################################################################
version: "3"

# ##############################################################################
# SERVICE DEFINITIONS

services:
  # ###########################################################################
  # Utility Services

  # Grafana Dashboard for the running services.
  # TODO: Add default meaningful set of dashboards & metrics.
  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    environment:
     - GF_INSTALL_PLUGINS=grafana-clock-panel
    ports:
     - '3000:3000'
    volumes:
      - ./grafana/datasources:/etc/grafana/provisioning/datasources

  # Prometheus metrics collection for services running inside this container.
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    ports:
      - 3001:9090
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: unless-stopped
    volumes:
      # Prometheus is configured from files in our local ./config/prometheus directory
      - ./config/prometheus:/etc/prometheus:ro
      # Prometheus stores its data in this docker volume provided by docker.
      - prom_data:/prometheus

  # Loki to collect logs from all running services.
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - 3002:3100

  # Fluentbit to collect logs from all running services and send them to Loki.
  # Docker doesn;t support sending to Loki out of the box, this prevents us
  # needing to get the end user to install a docker plugin.
  # NOTE: Docker always logs external to the container network, so the port here
  # MUST be exported on the host machine, or logging will not work and be directed
  # to grafana.
  fluentbit:
    image: grafana/fluent-bit-plugin-loki:latest
    container_name: fluentbit
    environment:
      - LOKI_URL=http://loki:3100/loki/api/v1/push
    volumes:
      - ./config/loki/fluent-bit.conf:/fluent-bit/etc/fluent-bit.conf
    ports:
      - "${FLUENT_BIT_PORT}:24224"
      - "${FLUENT_BIT_PORT}:24224/udp"
    depends_on:
      - loki

  # Postgresql Database
  db:
    image: postgres:14
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 2s
      timeout: 5s
      retries: 10
    ports:
      - 5432:5432
    volumes:
      # Postgres stores its data in this docker volume provided by docker.
      - eventdb:/var/lib/postgresql/data

  # Monitoring for postgres running in this stack.
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    ports:
      - 9187:9187
    environment:
      - DATA_SOURCE_URI=db?sslmode=disable
      - DATA_SOURCE_USER=${POSTGRES_USER}
      - DATA_SOURCE_PASS=${POSTGRES_PASSWORD}
    links:
      - db
      - prometheus

  # Local interface for easy access to the Postgres database
  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    links:
      - db

  # Nginx Proxy to unify all services under the one entrypoint.
  # Also serves the local documentation and primary user interface to the running stack.
  # TODO

  # ###########################################################################
  # Catalyst Specific Services

  # Initialise the database with a clean slate
  migrations:
    image: migrations:latest
    environment:
      # Required environment variables for migrations
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${POSTGRES_DB}
      - DB_SUPERUSER=${POSTGRES_USER}
      - DB_SUPERUSER_PASSWORD=${POSTGRES_PASSWORD}
      - DB_USER=${DB_USER}
      - DB_USER_PASSWORD=${DB_USER_PASSWORD}
      - ADMIN_ROLE_PASSWORD=CHANGE_ME
      - ADMIN_USER_PASSWORD=CHANGE_ME
      - ANON_ROLE_PASSWORD=CHANGE_ME
    depends_on:
      fluentbit:
        condition: service_started
      db:
        condition: service_healthy

    # Send all logs to our internal fluentbit service.
    logging:
      driver: fluentd
      options:
        fluentd-address: ${FLUENT_BIT_HOST}:${FLUENT_BIT_PORT}

  # Catalyst Data Service
  cat-data-service:
    image: cat-data-service:latest
    command: --log-level=debug --log-format=json
    environment:
      - DATABASE_URL=postgres://${DB_USER}:${DB_USER_PASSWORD}@db/${POSTGRES_DB}
    depends_on:
      fluentbit:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    ports:
      - 3030:3030
      - 3031:3031

    # Send all logs to our internal fluentbit service.
    logging:
      driver: fluentd
      options:
        fluentd-address: ${FLUENT_BIT_HOST}:${FLUENT_BIT_PORT}

  # Primary Voting Node - 0
  leader0:
    image: voting-node:latest
    hostname: leader0
    depends_on:
      fluentbit:
        condition: service_started
      migrations:
        condition: service_completed_successfully
    environment:
      # Required env vars
      - IS_NODE_RELOADABLE=True
      - VOTING_HOST=0.0.0.0
      - VOTING_PORT=8000
      - VOTING_LOG_LEVEL=debug
      - VOTING_NODE_STORAGE=node_storage
      - EVENTDB_URL=postgres://${DB_USER}:${DB_USER_PASSWORD}@db/${POSTGRES_DB}
      - JORM_PATH=jormungandr
      - JCLI_PATH=jcli
      ### SECRET GENERATION
      # The CRS is used to generate committee members, this is only used by leader0
      - COMMITTEE_CRS=COMMON-REFERENCE-STRING-USED-THAT-IS-SECRET
      - SECRET_SECRET=SUPER_SECRET_SECRET_THAT_MUST_BE_CHANGED
      ### EXTERNAL DATA IMPORTER
      - IDEASCALE_API_TOKEN=USE-A-VALID-API-TOKEN-FROM-IDEASCALE
      - IDEASCALE_API_URL=https://cardano.ideascale.com
      ### SNAPSHOT TOOL DATA IMPORTER
      - SNAPSHOT_INTERVAL_SECONDS=1800
      - SNAPSHOT_OUTPUT_DIR=/tmp/snapshot-output
      - SNAPSHOT_NETWORK_ID=testnet
      - DBSYNC_URL=postgres://${DB_USER}:${DB_USER_PASSWORD}@db/${POSTGRES_DB}
      - GVC_API_URL=https://cardano.ideascale.com
    volumes:
      - leader0_store:/node_storage
      - leader0_store:/tmp/snapshot-output

    # Send all logs to our internal fluentbit service.
    logging:
      driver: fluentd
      options:
        fluentd-address: ${FLUENT_BIT_HOST}:${FLUENT_BIT_PORT}

  # Secondary Voting Node - 1 - TODO
  # Tertiary Voting Node - 2 - TODO
  # Voting Node - Follower - 1 - TODO
  # Voting Node - Follower - 2 - TODO




volumes:
  eventdb:
  leader0_store:

  grafana_lib:
  prom_data:
